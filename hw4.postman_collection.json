{
	"info": {
		"_postman_id": "0c167abc-ba46-4f14-b618-05fd680889ec",
		"name": "hw4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"boatCreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"boatCreatedSelf\", self);",
							"",
							"",
							"//Set boat id environment variable from response",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.loads.length).to.equal(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"boat = {\"name\": \"Duck Walk\",   \"type\": \"canoe\", \"length\": 8 } \r",
							"pm.environment.set(\"boat\", JSON.stringify(boat));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{boat}}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Boat With Self Parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"boat = pm.response.json();\r",
							"origionalBoat = JSON.parse(pm.environment.get(\"boat\"));\r",
							"pm.test(\"Contents of boat is correct\", function() {\r",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);\r",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);\r",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{boatCreatedSelf}}",
					"host": [
						"{{boatCreatedSelf}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"     pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({ \"Error\": \"The request object is missing at least one of the required attributes\" } ));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Sea Witch\",   \"type\": \"Catamaran\" } "
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat (new boat, no loads)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"No boat with this boat_id exists\"  } ));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"loadCreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"loadCreatedSelf\", self);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.carrier).to.equal(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"load = {\"volume\": 5, \"content\": \"LEGO Blocks\" } \r",
							"pm.environment.set(\"load\", JSON.stringify(load));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{load}}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Load With Self Parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Contents of load is correct\", function() {\r",
							"    load = pm.response.json();\r",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load\"));\r",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);\r",
							"    pm.expect(load.content).to.equal(origionalLoad.content);\r",
							"    pm.expect(load.carrier).to.equal(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{loadCreatedSelf}}",
					"host": [
						"{{loadCreatedSelf}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"    pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({ \"Error\": \"The request object is missing the required volume or content\" } ));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 5\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load (new load, no carrier)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.carrier).to.equal(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"No load with this load_id exists\"  } ));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}",
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified boat and/or load does not exist\"  } ));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified boat and/or load does not exist\"  } ));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid boat id & invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified boat and/or load does not exist\"  } ));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "load already assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified load is already on a boat\"  } ));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}",
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content besides loads is valid\", function () {",
							"    boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.self).to.equal(pm.environment.get(\"boatCreatedSelf\"));",
							"});",
							"",
							"pm.test(\"loads content is valid\", function () {",
							"    boat = pm.response.json();",
							"    pm.expect(String(boat.loads[0].id)).to.equal(pm.environment.get(\"loadCreatedId\"));",
							"    pm.expect(boat.loads[0].self).to.equal(pm.environment.get(\"loadCreatedSelf\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after assigned to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content besides carrier is valid\", function () {",
							"    load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.self).to.equal(pm.environment.get(\"loadCreatedSelf\"));",
							"});",
							"",
							"pm.test(\"carrier content is valid\", function () {",
							"    load = pm.response.json();",
							"    pm.expect(String(load.carrier.id)).to.equal(pm.environment.get(\"boatCreatedId\"));",
							"    pm.expect(load.carrier.name).to.equal(JSON.parse(pm.environment.get(\"boat\")).name);",
							"    pm.expect(load.carrier.self).to.equal(pm.environment.get(\"boatCreatedSelf\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load from boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}",
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after removed from boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.carrier).to.equal(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.loads.length).to.equal(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load - load not on this boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified load is not on this boat\"  } ));",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}",
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified boat and/or load does not exist\"  } ));",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified boat and/or load does not exist\"  } ));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid boat id & invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified boat and/or load does not exist\"  } ));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}",
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after carrier boat deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Contents of load is correct\", function() {",
							"    load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.carrier).to.equal(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"No boat with this boat_id exists\"  } ));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"No load with this load_id exists\"  } ));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"boatCreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"boatCreatedSelf\", self);",
							"",
							"",
							"//Set boat id environment variable from response",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.loads.length).to.equal(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{boat}}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to newest boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}",
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content besides loads is valid\", function () {",
							"    boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.self).to.equal(pm.environment.get(\"boatCreatedSelf\"));",
							"});",
							"",
							"pm.test(\"loads content is valid\", function () {",
							"    boat = pm.response.json();",
							"    pm.expect(String(boat.loads[0].id)).to.equal(pm.environment.get(\"loadCreatedId\"));",
							"    pm.expect(boat.loads[0].self).to.equal(pm.environment.get(\"loadCreatedSelf\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{loadCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{loadCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.loads.length).to.equal(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boatCreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boatCreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"boat01CreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"boat01CreatedSelf\", self);",
							"",
							"",
							"//Set boat id environment variable from response",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat01\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.loads.length).to.equal(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"boat01 = {\"name\": \"boat01\",   \"type\": \"tanker\", \"length\": 200 } \r",
							"pm.environment.set(\"boat01\", JSON.stringify(boat01));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{boat01}}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"load01CreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"load01CreatedSelf\", self);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load01\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.carrier).to.equal(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"load01 = {\"volume\": 10, \"content\": \"load01\" } \r",
							"pm.environment.set(\"load01\", JSON.stringify(load01));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{load01}}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load01 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01CreatedId}}/loads/{{load01CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01CreatedId}}",
						"loads",
						"{{load01CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"load02CreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"load02CreatedSelf\", self);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load02\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.carrier).to.equal(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"load02 = {\"volume\": 15, \"content\": \"load02\" } \r",
							"pm.environment.set(\"load02\", JSON.stringify(load02));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{load02}}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load02 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01CreatedId}}/loads/{{load02CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01CreatedId}}",
						"loads",
						"{{load02CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"load03CreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"load03CreatedSelf\", self);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load03\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.carrier).to.equal(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"load03 = {\"volume\": 17, \"content\": \"load03\" } \r",
							"pm.environment.set(\"load03\", JSON.stringify(load03));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{load03}}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load03 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01CreatedId}}/loads/{{load03CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01CreatedId}}",
						"loads",
						"{{load03CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set appropriate environment variable for load id",
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"load04CreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"load04CreatedSelf\", self);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    load = pm.response.json();",
							"    origionalLoad = JSON.parse(pm.environment.get(\"load04\"));",
							"    pm.expect(load.volume).to.equal(origionalLoad.volume);",
							"    pm.expect(load.content).to.equal(origionalLoad.content);",
							"    pm.expect(load.carrier).to.equal(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"load04 = {\"volume\": 20, \"content\": \"load04\" } \r",
							"pm.environment.set(\"load04\", JSON.stringify(load04));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{load04}}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load04 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01CreatedId}}/loads/{{load04CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01CreatedId}}",
						"loads",
						"{{load04CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads for given boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"load01 content is valid\", function () {",
							"    found = false;",
							"    loads = pm.response.json();",
							"    loads.forEach(function(load) {",
							"     if(load.id == pm.environment.get(\"load01CreatedId\")){",
							"         pm.expect(load.self).to.equal(pm.environment.get(\"load01CreatedSelf\"));",
							"        found = true;",
							"        }",
							"    }); ",
							"    pm.expect(found).to.equal(true);",
							"});",
							"",
							"pm.test(\"load02 content is valid\", function () {",
							"    found = false;",
							"    loads = pm.response.json();",
							"    loads.forEach(function(load) {",
							"     if(load.id == pm.environment.get(\"load02CreatedId\")){",
							"         pm.expect(load.self).to.equal(pm.environment.get(\"load02CreatedSelf\"));",
							"        found = true;",
							"        }",
							"    }); ",
							"    pm.expect(found).to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"load03 content is valid\", function () {",
							"   found = false;",
							"    loads = pm.response.json();",
							"    loads.forEach(function(load) {",
							"     if(load.id == pm.environment.get(\"load03CreatedId\")){",
							"         pm.expect(load.self).to.equal(pm.environment.get(\"load03CreatedSelf\"));",
							"        found = true;",
							"        }",
							"    }); ",
							"    pm.expect(found).to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"load04 content is valid\", function () {",
							"    found = false;",
							"    loads = pm.response.json();",
							"    loads.forEach(function(load) {",
							"     if(load.id == pm.environment.get(\"load04CreatedId\")){",
							"         pm.expect(load.self).to.equal(pm.environment.get(\"load04CreatedSelf\"));",
							"        found = true;",
							"        }",
							"    }); ",
							"    pm.expect(found).to.equal(true);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01CreatedId}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01CreatedId}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads for boat with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(JSON.stringify(pm.response.json())).to.equal(JSON.stringify({     \"Error\": \"The specified boat does not exist\"  } ));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads with pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 not found\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of loads in response\", function () {",
							"    loads = pm.response.json();",
							"     pm.expect(loads.items.length).to.equal(3);",
							"});",
							"",
							"pm.test(\"next property exists\", function () {",
							"    loads = pm.response.json();",
							"    nextFound = false;",
							"    if(loads.next != null){",
							"        nextFound = true;",
							"    }",
							"     pm.expect(nextFound).to.equal(true);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"boat02CreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"boat02CreatedSelf\", self);",
							"",
							"",
							"//Set boat id environment variable from response",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat02\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.loads.length).to.equal(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"boat = {\"name\": \"boat02\",   \"type\": \"kayak\", \"length\": 8 } \r",
							"pm.environment.set(\"boat02\", JSON.stringify(boat));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{boat02}}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"boat03CreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"boat03CreatedSelf\", self);",
							"",
							"",
							"//Set boat id environment variable from response",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat03\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.loads.length).to.equal(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"boat = {\"name\": \"boat03\",   \"type\": \"kayak\", \"length\": 8 } \r",
							"pm.environment.set(\"boat03\", JSON.stringify(boat));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{boat03}}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"createdId = pm.response.json().id;",
							"pm.environment.set(\"boat04CreatedId\", createdId);",
							"self = pm.response.json().self;",
							"pm.environment.set(\"boat04CreatedSelf\", self);",
							"",
							"",
							"//Set boat id environment variable from response",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   boat = pm.response.json();",
							"    origionalBoat = JSON.parse(pm.environment.get(\"boat04\"));",
							"    pm.expect(boat.name).to.equal(origionalBoat.name);",
							"    pm.expect(boat.length).to.equal(origionalBoat.length);",
							"    pm.expect(boat.type).to.equal(origionalBoat.type);",
							"    pm.expect(boat.loads.length).to.equal(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"boat = {\"name\": \"boat04\",   \"type\": \"kayak\", \"length\": 8 } \r",
							"pm.environment.set(\"boat04\", JSON.stringify(boat));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{boat04}}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats with pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 not found\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of boats in response\", function () {",
							"     boats = pm.response.json();",
							"     pm.expect(boats.items.length).to.equal(3);",
							"});",
							"",
							"pm.test(\"next property exists\", function () {",
							"    boats = pm.response.json();",
							"    nextFound = false;",
							"    if(boats.next != null){",
							"        nextFound = true;",
							"    }",
							"     pm.expect(nextFound).to.equal(true);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load01CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load01CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load02CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load02CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load03CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load03CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load04CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load04CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat02CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat02CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat03CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat03CreatedId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat04CreatedId}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat04CreatedId}}"
					]
				}
			},
			"response": []
		}
	]
}